{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAiCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKd,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBkB,SAAAP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACkCC,UAAUH,GAD5C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATnB,kBAaZM,GAbY,4CAAH,sDCYLO,EAVK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE/B,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCkBKO,EArBQ,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACvB,ECF0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAAC,GACJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAACpB,IAEGqB,EDdwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEURgB,EArBa,WAC1B,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEI2C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,YCVnB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.34d8e808.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  }\n\n  return (\n      <form onSubmit={handleSubmit}>\n        <input \n          type='text' \n          value={inputValue}\n          onChange={handleInputChange}\n        />\n      </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","export const getGifs = async(category) => {\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=mgGA60B8320UFz5nlxW6WzyAoJuAdatx`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    \n    const gifs = data.map(img => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url\n      }\n    })\n    \n    return gifs;\n  }","import React from 'react'\n\nconst GifGridItem = ({id, title, url}) => {\n  \n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem;\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n  const {data:images, loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n      {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n      <div className='card-grid'>\n        {\n          images.map( img => (\n            <GifGridItem \n              key={img.id}\n              {...img}\n            />//\n          ))\n        }\n      </div>\n    </>\n  )\n}\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then(imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        });\n      })\n  }, [category]);\n\n  return state; // { data:[], loading: true}\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Dragon Ball']);\n\n  return(\n    <>\n      <h2>GifExpertApp</h2>\n      <hr /> \n      <AddCategory setCategories={setCategories}/>\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid \n              key={category}\n              category={category}/>\n          ))\n        }\n      </ol>\n    </>\n  );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}